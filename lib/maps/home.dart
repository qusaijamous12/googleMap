import 'dart:async';
import 'package:conditional_builder_null_safety/conditional_builder_null_safety.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:material_floating_search_bar_2/material_floating_search_bar_2.dart';
import 'package:task1/helper/location_helper.dart';
import 'package:task1/maps/cubit/cubit.dart';
import 'package:task1/maps/cubit/state.dart';
import '../model/serachModel.dart';




class MapScreen extends StatefulWidget {
  @override
  State<MapScreen> createState() => _MapScreenState();

}

class _MapScreenState extends State<MapScreen> {



  FloatingSearchBarController controller=FloatingSearchBarController();

  Completer<GoogleMapController> _mapController=Completer();

  var serachController=TextEditingController();

  static  CameraPosition _myCurrentLocationCameraPosition=CameraPosition(
    bearing: 0,
      target: LatLng(position!.latitude,position!.longitude),
    zoom: 17,
    tilt: 0,
  );
  static  CameraPosition ?_myNewLocationCameraPosition;


  static Position ?position;

  // LatLng? _currentPosition;
   Set<Marker> markerss={};

  @override

  void initState() {
    super.initState();
    _getMyCurrentLocation();
  }

  Future<void> _getMyCurrentLocation() async {
    position=await LocationHelper.getCurrentLocation().whenComplete(() {
      setState(() {

      });
    });

  }

  Future<void> _goToMyCurrentLocation()async{
    final GoogleMapController controller=await _mapController.future;
    controller.animateCamera(CameraUpdate.newCameraPosition(_myCurrentLocationCameraPosition));
  }

  Future<void> _goToNewCurrentLocation()async{
    final GoogleMapController controller=await _mapController.future;
    controller.animateCamera(CameraUpdate.newCameraPosition(_myNewLocationCameraPosition!));
  }

  Widget buildMap(){
    return GoogleMap(
      mapType: MapType.normal,
      myLocationEnabled: true,
      myLocationButtonEnabled: false,//remember 27
      initialCameraPosition: _myCurrentLocationCameraPosition,
      onMapCreated: (GoogleMapController controller){
        _mapController.complete(controller);
      },
      markers: markerss,

    );

  }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<MapCubit,MapsState>(
      listener: (context,MapsState){

      },
      builder: (context,MapsState){
        var cubit=MapCubit.get(context).autogenerated;
        return  Scaffold(
            appBar: AppBar(
              title: Text('Google Map'),
              actions: [
                // IconButton(
                //     onPressed: (){
                //       MapCubit.get(context).getData(value: 'a');
                //     },
                //     icon: Icon(
                //       Icons.transfer_within_a_station
                //     )),
                // IconButton(
                //     onPressed: (){
                //       MapCubit.get(context).getLocationOnMap();
                //     }
                //     , icon: Icon(
                //   Icons.add
                // ))
              ],
            ),
            body: Stack(
              fit: StackFit.expand,
              children: [
                position !=null ?buildMap():Center(
                  child: Container
                    (
                    child:
                    CircularProgressIndicator(

                      color: Colors.blue,
                    )
                    ,)
                  ,),

                buildFloatingSerachBar(),

                Align(
                  alignment: AlignmentDirectional.bottomStart,
                  child: Padding(
                    padding: EdgeInsetsDirectional.only(
                        bottom: 15,
                        start: 15
                    ),
                    child: FloatingActionButton(
                      onPressed: (){
                        _goToMyCurrentLocation();

                      },

                      child: Icon(
                        Icons.place,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),


              ],
            )
        );
      },
    );
  }

  Widget buildFloatingSerachBar(){

    final isPortrait=MediaQuery.of(context).orientation == Orientation.portrait;

    return FloatingSearchBar(
      elevation: 6,
      controller: controller,
      hintStyle: TextStyle(
        fontSize: 18
      ),
      queryStyle: TextStyle(
        fontSize: 18
      ),
      hint: 'Serach a place',
      border: BorderSide(
        style: BorderStyle.none
      ),
      margins: EdgeInsets.fromLTRB(20, 70, 20, 0),
      padding: EdgeInsets.fromLTRB(2, 0, 2, 0),
      height: 52,
      iconColor: Colors.blue,
      scrollPadding: const EdgeInsets.only(top: 16,bottom: 56),
      transitionDuration: const Duration(milliseconds: 600),
      transitionCurve: Curves.easeInOut,
      physics: const BouncingScrollPhysics(),
      axisAlignment: isPortrait?0.0:-1.0,
      openAxisAlignment: 0.0,
      width:isPortrait?600:500 ,
      debounceDelay: const Duration(milliseconds: 500),
      onQueryChanged: (query){
        MapCubit.get(context).getData(value: query);

      },
      onFocusChanged: (_){

      },
      transition: CircularFloatingSearchBarTransition(),
      actions: [
        FloatingSearchBarAction(
          showIfOpened: false,
          child: CircularButton(
            icon: Icon(
              Icons.place,
              color: Colors.black,
            ),
            onPressed: (){

            },

          ),
        )
      ],
      builder: (context,transition){
        return ClipRRect(
          borderRadius: BorderRadius.circular(8),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              ConditionalBuilder(
                  condition:  MapCubit.get(context).autogenerated!=null,
                  builder: (context)=>ListView.separated(
                      physics: NeverScrollableScrollPhysics(),
                      shrinkWrap: true,
                      itemBuilder: (context,index)=>BuildSerachItem(MapCubit.get(context).autogenerated!.predictions![index]),
                      separatorBuilder: (context,index)=>SizedBox(
                        height: 10,
                      ),
                      itemCount: MapCubit.get(context).autogenerated!.predictions!.length),
                  fallback: (context)=>Center(child: CircularProgressIndicator()))





            ],
          )
          ,
        );
      },

    );


  }
  // Widget buildSuggestaionsBloc(){
  //   return BlocBuilder<MapCubit,MapsState>(
  //     builder:(context,state){
  //       if(state is PlacesLoades){
  //         places=state.places;
  //         if(places.length>0){
  //           return buildPlacesList();
  //         }
  //         else
  //           {
  //             return Container();
  //           }
  //
  //
  //       }
  //       else
  //         {
  //           return Container();
  //         }
  //     } ,
  //   );
  //
  // }
  
  void ChangeCameraPosition({
    required dynamic lat,
    required dynamic lng
}){
    _myNewLocationCameraPosition=CameraPosition(
      bearing: 0,
      target: LatLng(lat,lng),
      zoom: 17,
      tilt: 0,



    );
    setState(() {

    });

  }

  Widget BuildSerachItem(Predictions predictions)=> InkWell(
    onTap: (){
      MapCubit.get(context).getLocationOnMap(placeIdd: predictions.placeId!);
      dynamic lat=MapCubit.get(context).placeId!.result!.geometry!.location!.lat!;
      dynamic lng=MapCubit.get(context).placeId!.result!.geometry!.location!.lng!;
      setState(() {
        markerss.add(
          Marker(
              markerId:MarkerId('marker1'),
            position: LatLng(lat,lng)
          )
        );
      });
      ChangeCameraPosition(lat: lat, lng: lng);
      _goToNewCurrentLocation();

      controller.close();
    },
    child: Row(
      children: [


        Expanded(
          child: Material(
            elevation: 10,
            child: Container(
              height: 80,
              padding: EdgeInsetsDirectional.symmetric(
                  vertical: 10,
                  horizontal: 10
              ),
              decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border.all(
                      color: Colors.white
                  )
              ),
              child: Text(
                '${predictions.description}',
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
                style: TextStyle(
                    fontSize: 18,
                    height: 1.5,
                    fontWeight: FontWeight.bold
                ),
              ),
            ),
          ),
        )
      ],
    ),
  );






}





